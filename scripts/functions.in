#
# Copyright 2013 Cray Inc. All Rights Reserved
#

#
# This file is an Urika-GX requirement. Not used on other Cray platforms.
#

ANSIBLE_ENABLED="@ansible_enabled@"
PROC_MAPFILE=/proc/fs/dvs/ssi-map
HOST_FILE=/etc/hosts
DEV_USS_MAJOR_NO=237
DEV_USS_MINOR_NO=0

MODPROBE=/sbin/modprobe
RCAHELPER=@CRAY_RCA_DEFAULT_BINDIR@/rca-helper
GREP=/usr/bin/grep

if [ -e /proc/cray_xt ];then
    MAX_NODES=$($RCAHELPER -m)
    MY_PHYSNODEID=$($RCAHELPER -i)
    MY_CNAME=$($RCAHELPER -I)
    ATHENA_RNAME=$($GREP -c "r" /proc/cray_xt/cname)

    if [ $ATHENA_RNAME -eq 1 ]; then
        ACC_NODES=$($RCAHELPER -l | tail -n $MAX_NODES |\
            awk '\
                FILENAME=="-" {\
                    cname=sprintf("r%ds%dc%dn%da0",\
		        or(lshift(and($6,63),4),and($8,15)),$9,$10,$11);\
                    rca[cname]=1;\
                    next}\
                ($1!~/^#/ && $4~/^acc[0-9]+/) {\
                    n+=rca[$3];}\
                END {\
                    print n;}\
            ' - $HOST_FILE
        )
    else
        ACC_NODES=$($RCAHELPER -l | tail -n $MAX_NODES |\
            awk '\
                FILENAME=="-" {\
                    cname=sprintf("c%d-%dc%ds%dn%da0",\
                        $6,$8,$9,$10,$11);\
                    rca[cname]=1;\
                    next}\
                ($1!~/^#/ && $4~/^acc[0-9]+/) {\
                    n+=rca[$3];}\
                END {\
                    print n;}\
            ' - $HOST_FILE
        )
    fi

    TOTAL_NODES=$((MAX_NODES + ACC_NODES))
fi

#
# Load a kernel module
#
modload()
{
    $MODPROBE $* >/dev/null
    if [ $? -ne 0 ]; then
        rc_failed 7
        rc_status -v
        echo "Failed to load module: $1"
        rc_exit
    fi
    MODS_LOADED="$1 $MODS_LOADED"
}

#
# Create the DVS device node
#
make_dev_uss() {
    rm -f /dev/uss
    mknod /dev/uss c $DEV_USS_MAJOR_NO $DEV_USS_MINOR_NO > /dev/null 2>&1
    if [ $? != 0 ]; then
        echo "$CMD: failed to create a proper /dev/uss entry; exiting..."
        rc_failed 6
        rc_status -v
        rc_exit
    fi
}

#
# Pipe formatted list of nodes to /proc file.
#
seed_node_map()
{
    # Seed DVS kernel node-map.
    if [ -z $MAX_NODES ];then
        rc_failed 7
        rc_status -v
        echo "Failed to write node-map to $PROC_MAPFILE"
        $MODPROBE -r $MODS_LOADED
        rc_exit
    fi

    if [ $ATHENA_RNAME -eq 1 ]; then
        $RCAHELPER -l | tail -n $MAX_NODES |\
            awk '\
                $1~/^#/ {next}\
                FILENAME=="-" {\
                    cname=sprintf("r%ds%dc%dn%d",\
		        or(lshift(and($6,63),4),and($8,15)),$9,$10,$11);\
                    printf("%s %s\n",cname,$1);\
                    rca[cname "a0"]=$1;\
                    next}\
                $4~/^acc[0-9]+/ && ($3 in rca) {\
                    nid=$2;\
                    gsub("nid","",nid);\
                    printf("%s %d\n",$3,nid);}\
            ' - $HOST_FILE > $PROC_MAPFILE
    else
        $RCAHELPER -l | tail -n $MAX_NODES |\
            awk '\
                $1~/^#/ {next}\
                FILENAME=="-" {\
                    cname=sprintf("c%d-%dc%ds%dn%d",\
                        $6,$8,$9,$10,$11);\
                    printf("%s %s\n",cname,$1);\
                    rca[cname "a0"]=$1;\
                    next}\
                $4~/^acc[0-9]+/ && ($3 in rca) {\
                    nid=$2;\
                    gsub("nid","",nid);\
                    printf("%s %d\n",$3,nid);}\
            ' - $HOST_FILE > $PROC_MAPFILE
    fi
}

#
# Perform a physical-to-logical nodeID translation
#
getlnodeID() {
    lnode=0
    $RCAHELPER -l | tail -n $MAX_NODES | while read name rest; do
        if [ "$MY_PHYSNODEID" = "$name" ]; then
            echo $lnode
            break
        fi
        lnode=$((lnode+1))
    done
}

#
# Is the specified module loaded?
#
isloaded() {
    while read mod x
    do
        [ "$mod" = "$1" ] && return 0
    done < /proc/modules
    return 1
}

#
# Are we running on a system using portals?
#
isportals() {
    if isloaded portals
    then
       return 0
    fi
    return 1
}

#
# Check for DVS mount points in /etc/fstab
#
checkmounts() {
    if [ -e /etc/fstab ]; then
        while read partition mountpoint fstype x; do
            # Skip blank lines and comments    
            [ -z "${partition##\#*}" ] && continue
            [ "$fstype" = "dvs" ] && return 0
        done < /etc/fstab
    fi

    echo "No DVS mount points, startup aborted"
    rc_exit
}

#
# Mount the dvs partitions from /etc/fstab.
#
domounts() {
    if [ "$ANSIBLE_ENABLED" ]; then
        local CNT=10 DELAY=30
        #
        # Give the server a moment to initialise itself
        #
        # sleep 60
    fi
    #
    # mount DVS partitions
    #
    while read partition mountpoint fstype x; do
        #
        # Allow for CNL-based dvs servers
        #
        [ -z "${partition##\#*}" ] && continue
        [ "$fstype" != "dvs" ] && continue

        if [ "$ANSIBLE_ENABLED" == "no" ]; then
            # Pearl code
            umount ${mountpoint} > /dev/null 2>&1
            mount ${mountpoint} &
            mount_pid=$!
            show_success=0
            #
            # Check for mount success/failure.
            #
            for a in 1 2 5; do
                sleep $a
                [ -e /proc/${mount_pid} ] || continue
                if [ $a = 5 ]; then
                    echo "$CMD: failed to mount DVS partition ${mountpoint} in under 8 seconds. Verify mount and configuration.  Waiting for mount to finish..." > /dev/stderr
                    show_success=1
                fi
            done
            wait $mount_pid
            mount_status=$?
            if [ $mount_status -ne "0" ]; then
                if [ ! -e ${mountpoint} ]; then
                    echo "$CMD: DVS mountpoint ${mountpoint} does not exist, check your initramfs image" > /dev/stderr
                else
                    echo "$CMD: mount returned error ${mount_status} for ${mountpoint}" > /dev/stderr
                fi
            else
                if [ "$show_success" = "1" ]; then
                    echo "$CMD: mount of ${mountpoint} finished successfully" > /dev/stderr
                fi
            fi
        else
            # Rhine code
            # only attempt to mount if not already mounted
            read found <<< $(awk -v val="$mountpoint" '$5 == val' /proc/self/mountinfo)
            if [ "$found" == "" ]; then
                umount ${mountpoint} > /dev/null 2>&1
                success=0
                count=0; while [[ $count -lt $CNT ]]
                do
                    count=$((count+1))
                    mount ${mountpoint} &
                    #
                    # Check for mount success/failure.
                    #
                    gcnt=0
                    i=0
                    while [ "$i" -lt "$DELAY" ]
                    do
                        gcnt=$((gcnt + 1))
                        read found <<< $(awk -v val="$mountpoint" '$5 == val' /proc/self/mountinfo)
                        if [ "$found" != "" ]; then
                            success=1
                            break
                        fi
                        sleep 1
                        i=$((i + 1))
                    done
                    echo "$CMD: mounting ${mountpoint}: loop ${count}, check ${gcnt}."
                    if [ "$success" == "1" ]; then
                        break
                    fi
                done
            fi
            # Optionally use count to "unmount n-1 attempts"
            read found <<< $(awk -v val="$mountpoint" '$5 == val' /proc/self/mountinfo)
            if [ "$found" != "" ]; then
                echo "$CMD: mount of ${mountpoint} finished successfully" 1>&2
            else
                echo "$CMD: mount of ${mountpoint} failed, $CNT attempts with $DELAY second delays" 1>&2
            fi
        fi
    done < /etc/fstab
}

do_unmount() {
    #
    # unmount DVS partitions
    #
    while true ; do
        # Find first DVS filesystem in /proc/mounts
        while read DEV MNTPNT FSTYPE REST  ; do
            # Skip blank lines and comments
            [ -z "${DEV##\#*}" ] && continue
            
            if [ "$FSTYPE" = "dvs" ] ; then
                break;
            fi
        done < /proc/mounts

        # Unmount the filesystem.  Next time through, we'll find the next one.
        if [ -n "$MNTPNT" ] ; then
            umount "$MNTPNT"
            if [ "$?" -ne 0 ] ; then
                echo "Could not unmount " $MNTPNT ".  Skipping other $FSTYPE unmounts"
                break;
            fi
        else
            break; 
        fi   
    done  
}

# vim: expandtab sw=4 ts=4:
